global
  tune.ssl.default-dh-param 2048
  lua-load /usr/local/share/lua/5.3/jwtverify.lua 
  setenv OAUTH_PUBKEY_PATH /usr/local/share/lua/5.3/google-jwt-pems.json
  setenv OAUTH_ISSUER https://cloud.google.com/iap
  setenv OAUTH_AUDIENCE /projects/854303986590/global/backendServices/4528812505935018424
  setenv OAUTH_AUTH_HEADER_NAME x-goog-iap-jwt-assertion
  
defaults
  option forwardfor
  option http-server-close

frontend k3s  
  # Set the proxy mode to http (layer 7) or tcp (layer 4)
  mode http
  
  # Receive traffic via HTTPs only
  bind *:443 ssl crt /usr/local/etc/haproxy/certs/elbanyo.net.pem
  
  # Deny the request if it's missing an Authorization header
  http-request deny unless { req.hdr("x-goog-iap-jwt-assertion") -m found }
  
  # Verify the token by invoking the jwtverify Lua script 
  http-request lua.jwtverify
  
  # Deny the request unless 'authorized' is true
  http-request deny unless { var(txn.authorized) -m bool } || { req.hdr(host) -i elbanyo.net }
  
  use_backend emby if { req.hdr(host) -i emby.elbanyo.net }
  
  use_backend teamcity if { req.hdr(host) -i teamcity.elbanyo.net }
  
  use_backend arm-core if { req.hdr(host) -i arm-core.elbanyo.net }
  
  # Choose the default pool of backend servers
  default_backend landing-page

backend emby
  mode http
  balance roundrobin
  
  # Enable HTTP health checks
  option httpchk
  
  server level1 192.168.86.220:8096 check
  
backend teamcity
  mode http
  balance roundrobin
  
  # Enable HTTP health checks
  option httpchk
  http-check expect status 401
  
  server level1 192.168.86.220:8111 check
  
backend arm-core
  mode http
  balance roundrobin
  
  # Enable HTTP health checks
  option httpchk GET /api
  
  server level1 192.168.86.220:17883 check

backend landing-page
    mode http
    
    server level1 192.168.86.220:8097 check
