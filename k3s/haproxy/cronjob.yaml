---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ha-proxy-certbot
  namespace: ha-proxy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ha-proxy
  name: configmap-creator
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["configmaps"]
  verbs: ["create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-configmaps
  namespace: ha-proxy
subjects:
- kind: ServiceAccount
  name: ha-proxy-certbot
  namespace: ha-proxy
roleRef:
  kind: Role
  name: configmap-creator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ha-proxy-certs
  namespace: ha-proxy
data:
  munyard.dev: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: create-configmap-sh
  namespace: ha-proxy
data:
  create-configmap.sh: | 
    #!/bin/sh

    # Install curl, jo
    apk add --no-cache curl jo

    # Point to the internal API server hostname
    APISERVER=https://kubernetes.default.svc

    # Path to ServiceAccount token
    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount

    # Read this Pod's namespace
    NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)

    # Read the ServiceAccount bearer token
    TOKEN=$(cat ${SERVICEACCOUNT}/token)

    # Reference the internal certificate authority (CA)
    CACERT=${SERVICEACCOUNT}/ca.crt

    # Set domain name
    DOMAIN=munyard.dev

    # Set name of ConfigMap containing the certificate bundle
    CONFIGMAP=ha-proxy-certs

    # Update SSL certificate
    # jo -p pretty prints the JSON just for logging what we're patching. jo -a wraps the JSON as an array
    jo -p -a "$(jo op=replace path=/data value="$(jo ${DOMAIN}="$(cat /certs/live/${DOMAIN}/fullchain.pem /certs/live/${DOMAIN}/privkey.pem)")")"
    
    # Generate the JSON patch and PATCH it to the Kubernetes API
    jo -a "$(jo op=replace path=/data value="$(jo ${DOMAIN}="$(cat /certs/live/${DOMAIN}/fullchain.pem /certs/live/${DOMAIN}/privkey.pem)")")" | curl --data "@-" --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json-patch+json" -X PATCH ${APISERVER}/api/v1/namespaces/ha-proxy/configmaps/${CONFIGMAP}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: certificate-renewal-job
  namespace: ha-proxy
spec:
  # At 00:00, on day 1 of the month, every 3 months
  schedule: "0 0 1 */3 *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: ha-proxy-certbot
          restartPolicy: Never
          containers:
            - name: certificate-deploy
              image: alpine
              command: ["/bin/sh"]
              args: ["-c", "./scripts/create-configmap.sh"]
              imagePullPolicy: Always
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "250m"
                limits:
                  memory: "128Mi"
                  cpu: "500m"
              volumeMounts:
                - name: etc-letsencrypt
                  mountPath: /certs
                - name: create-configmap-sh
                  mountPath: /scripts
          initContainers:
            - name: certbot
              image: certbot/dns-google:arm64v8-latest
              imagePullPolicy: Always
              args: ["certonly", "--dns-google", "--dns-google-credentials", "/gcp/credentials.json", "-d", "munyard.dev,plex.munyard.dev,sab.munyard.dev,qb.munyard.dev,sonarr.munyard.dev,radarr.munyard.dev,pm.munyard.dev,www.munyard.dev", "--agree-tos", "--email", "dmunyard@gmail.com", "--non-interactive"]
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "250m"
                limits:
                  memory: "128Mi"
                  cpu: "500m"
              volumeMounts:
                - name: gcp-credentials
                  mountPath: "/gcp"
                - name: etc-letsencrypt
                  mountPath: /etc/letsencrypt
          volumes:
            - name: gcp-credentials
              secret:
                secretName: gcp-credentials
            - name: etc-letsencrypt
              emptyDir: {}
            - name: create-configmap-sh
              configMap:
                name: create-configmap-sh
                defaultMode: 0777